Exercise 2:

Use test driven development to create a Track 2 number validation service:
    - Create a set of a unit tests to check both the positive and negative case of each item in the spec.
    - Once a set of failing tests has been created, the logic for the validator can implemented.
    - Try to use your IDEs refactoring tools to generate the methods and classes for you.
    - Once all tests are green you know you are done.

In order of appearance:
- Track 2 data must be of certain length
    - throw ValidationException(ResponseEnum.TRACK2_INVALID_LENGTH)
- Card number, 16 digits; must be valid
    - Use the provided card number checker
    - throw ValidationException(INVALID_CARD)
- Expiration date of card in format YYMM
    - Use the provided expiry date checker
    - throw ValidationException(INVALID_EXP_DATE)
- Service code of 3 digits where each digit is according to accepted valid values
    - Use the provided service-code checker
    - throw ValidationException(INVALID_SERVICE_CODE)

Valid Track2: 49299004814036421603101
InValid Track2: 4929900481403642160310155
InValid Card Track2: 49299002814036421603101
InValid Exp Date Track2: 49299004814036421699101
InValid Service Code Track2: 49299004814036421603850
