Exercise 2:

Use test driven development to create a Track 2 number validation service:
    - Create a set of a unit tests to check both the positive and negative case of each item in the spec.
    - Once a set of failing tests has been created, the logic for the validator can implemented.
    - Try to use your IDEs refactoring tools to generate the methods and classes for you.
    - Once all tests are green build to the project to ensure you have reached 80% line and branch coverage, or the build will fail.

In order of appearance:
- Track 2 data must be of certain length : 23 characters
    - throw ValidationException(CardValidationErrorType.TRACK2_INVALID_LENGTH)
- Card number, 16 digits; must be valid
    - Use the provided card number checker
    - throw ValidationException(INVALID_CARD)
    invalid card numbers:
                7987954151321654
                NOT_A_NUMBER__:<
                4498484616416544
    valid card numbers :
                4388576019611022
                4388576019611030
                5388576018900076
                5388576018900084
- Expiration date of card in format YYMM
    - throw ValidationException(INVALID_EXP_DATE)
- Service code of 3 digits where each digit is according to accepted valid values
    - Use the provided service-code checker
    - throw ValidationException(INVALID_SERVICE_CODE)
    invalid service codes
        123
        AAA
        589
        228
    valid service codes
        947
        542
        100

Valid Track2: 43885760196110300612947
